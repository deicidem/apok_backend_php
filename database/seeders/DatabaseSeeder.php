<?php

namespace Database\Seeders;

use App\Models\Alert;
use App\Models\Dzz;
use App\Models\File;
use App\Models\FileType;
use App\Models\Group;
use App\Models\GroupType;
use App\Models\GroupUser;
use App\Models\Plan;
use App\Models\PlanData;
use App\Models\PlanDataType;
use App\Models\PlanRequirement;
use App\Models\ProcessingLevel;
use App\Models\Role;
use App\Models\Satelite;
use App\Models\SateliteType;
use App\Models\Sensor;
use App\Models\Spector;
use App\Models\Task;
use App\Models\TaskData;
use App\Models\TaskDataType;
use App\Models\TaskResult;
use App\Models\TaskResultFile;
use App\Models\TaskResultView;
use App\Models\TaskResultViewType;
use App\Models\TaskStatus;
use App\Models\User;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Storage;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     *
      * @return void
      */
    public function run()
    {

        Role::Create([
            'name' => 'Администратор'
        ]);
        Role::Create([
            'name' => 'Пользователь'
        ]);



        User::factory()->create([
            'first_name' => 'Андрей',
            'last_name'  => 'Почитаев',
            'email'      => 'test@example.com',
            'role_id'    => 1
        ]);
        User::factory()->create([
            'first_name' => 'Анна',
            'last_name'  => 'Афанасьева',
            'email'      => 'test1@example.ru',
            'role_id'    => 2
        ]);
        User::factory()->create([
            'first_name' => 'Анастасия',
            'last_name'  => 'Живых',
            'email'      => 'test2@example.ru',
            'role_id'    => 2
        ]);
        User::factory()->create([
            'first_name' => 'Лобзенев',
            'last_name'  => 'Вячеслав',
            'email'      => 'test3@example.ru',
            'role_id'    => 2
        ]);
        User::factory()->create([
            'first_name' => 'Игорь',
            'last_name'  => 'Долгих',
            'email'      => 'test4@example.ru',
            'role_id'    => 2
        ]);
        User::factory()->create([
            'first_name' => 'Иван',
            'last_name'  => 'Иванов',
            'email'      => 'test5@example.ru',
            'role_id'    => 2
        ]);
        User::factory()->create([
            'first_name' => 'Петр',
            'last_name'  => 'Петров',
            'email'      => 'test6@example.ru',
            'role_id'    => 2
        ]);
        // User:: factory(10)->create();

        GroupType::create([
            'title' => "Открытая"
        ]);
        GroupType::create([
            'title' => "Закрытая"
        ]);
        
        Group::create([
            'title'    => 'ЦИТ',
            'owner_id' => 1,
            'type_id'     => 1
        ]);
        Group::create([
            'title'    => 'НИИ КС',
            'owner_id' => 2,
            'type_id'     => 2
        ]);
        Group::create([
            'title'    => 'Студенты',
            'owner_id' => 1,
            'type_id'     => 1
        ]);

        GroupUser::create([
            'group_id' => 1,
            'user_id'  => 1
        ]);
        GroupUser::create([
            'group_id' => 1,
            'user_id'  => 2
        ]);
        GroupUser::create([
            'group_id' => 1,
            'user_id'  => 3
        ]);
        GroupUser::create([
            'group_id' => 2,
            'user_id'  => 1
        ]);
        GroupUser::create([
            'group_id' => 2,
            'user_id'  => 2
        ]);
        GroupUser::create([
            'group_id' => 3,
            'user_id'  => 4
        ]);
        GroupUser::create([
            'group_id' => 3,
            'user_id'  => 1
        ]);

        FileType::Create([
            'name' => 'Вектор'
        ]);
        FileType::Create([
            'name' => 'Изображение'
        ]);
        FileType::Create([
            'name' => 'Папка'
        ]);

        PlanDataType::Create([
            'name' => 'Изображение',
        ]);
        PlanDataType::Create([
            'name' => 'Вектор',
        ]);
        PlanDataType::Create([
            'name' => 'Параметр',
        ]);


        // КАТОД //
        // File::Create([
        //     'name'    => 'Выявление изменений',
        //     'type_id' => 2,
        //     'path'    => 'files/АВИМ/1.png',
        //     'user_id' => '1'
        // ]);
        // File::Create([
        //     'name'    => 'Классификация изменений',
        //     'type_id' => 2,
        //     'path'    => 'files/АВИМ/2.png',
        //     'user_id' => '1'
        // ]);
        // File::Create([
        //     'name'    => 'Мониторинг водных объектов',
        //     'type_id' => 2,
        //     'path'    => 'files/АВИМ/3.png',
        //     'user_id' => '1'
        // ]);
        // File::Create([
        //     'name'    => 'Мониторинг водных объектов',
        //     'type_id' => 2,
        //     'path'    => 'files/КАТОД/4.png',
        //     'user_id' => '1'
        // ]);
        // File::Create([
        //     'name'    => 'Мониторинг транспортных объектов на водной поверхности',
        //     'type_id' => 2,
        //     'path'    => 'files/КАТОД/5.png',
        //     'user_id' => '1'
        // ]);


        // File::Create([
        //     'name'    => 'Мониторинг состояния посевов',
        //     'type_id' => 2,
        //     'path'    => 'files/КАТОД/1.png',
        //     'user_id' => '1'
        // ]);
        // File::Create([
        //     'name'    => 'Мониторинг содержания азота в сельскохозяйственных растениях',
        //     'type_id' => 2,
        //     'path'    => 'files/КАТОД/2.png',
        //     'user_id' => '1'
        // ]);
        // File::Create([
        //     'name'    => 'Мониторинг переувлажненной территории на сельскохозяйственных полях',
        //     'type_id' => 2,
        //     'path'    => 'files/КАТОД/3.png',
        //     'user_id' => '1'
        // ]);
        // File::Create([
        //     'name'    => 'Мониторинг водных объектов',
        //     'type_id' => 2,
        //     'path'    => 'files/КАТОД/4.png',
        //     'user_id' => '1'
        // ]);
        // File::Create([
        //     'name'    => 'Мониторинг транспортных объектов на водной поверхности',
        //     'type_id' => 2,
        //     'path'    => 'files/КАТОД/5.png',
        //     'user_id' => '1'
        // ]);



        // АПОК //
        // File::Create([
        //     'name'    => 'Оценка геом',
        //     'type_id' => 2,
        //     'path'    => 'public/plans_previews/Оценка геом.png',
        // ]);
        // File::Create([
        //     'name'    => 'Оценка лин раз оптика',
        //     'type_id' => 2,
        //     'path'    => 'public/plans_previews/Оценка лин раз оптика.png',
        // ]);
        // File::Create([
        //     'name'    => 'Оценка лин раз радар',
        //     'type_id' => 2,
        //     'path'    => 'public/plans_previews/Оценка лин раз радар.png',
        // ]);
        // File::Create([
        //     'name'    => 'Оценка рад хар оптика',
        //     'type_id' => 2,
        //     'path'    => 'public/plans_previews/Оценка рад хар оптика.png',
        // ]);
        // File::Create([
        //     'name'    => 'Оценка рад хар радар',
        //     'type_id' => 2,
        //     'path'    => 'public/plans_previews/Оценка рад хар радар.png',
        // ]);

        File::Create([
            'name'    => 'Оценка геом',
            'type_id' => 2,
            'path'    => 'public/АВИМ/1.png',
        ]);
        File::Create([
            'name'    => 'Оценка лин раз оптика',
            'type_id' => 2,
            'path'    => 'public/АВИМ/2.png',
        ]);
        File::Create([
            'name'    => 'Оценка лин раз радар',
            'type_id' => 2,
            'path'    => 'public/АВИМ/3.png',
        ]);
        File::Create([
            'name'    => 'Оценка рад хар оптика',
            'type_id' => 2,
            'path'    => 'public/plans_previews/Оценка рад хар оптика.png',
        ]);
        File::Create([
            'name'    => 'Оценка рад хар радар',
            'type_id' => 2,
            'path'    => 'public/plans_previews/Оценка рад хар радар.png',
        ]);

        
        // АВИМ //
        Plan::Create([
            'title'       => 'Выявление изменений',
            'description' => '
                <p>В ходе выполнения данной задачи происходит поиск изменений по двум разновременным снимкам: архивному и актуальному.</p>

                <p>Для корректной работы алгоритма снимки должны соответствовать следующим требованиям: </p>

                <ul>
                    <li>Снимки имеют область пересечения.</li>
                    <li>Снимки имеют одинаковую последовательность цветовых каналов, так как логика алгоритма заключается в сравнении каждой пары соответствующих каналов. </li>
                </ul>

                <p>
                Результатом выполнения данной задачи является векторный слой изменений и отчетная форма со статистической информацией. 
                </p>
                ',
            'excerpt'    => 'Выявление всех изменений, присутствующих на снимках, и вычисление их общей площади. ',
            'preview_id' => 1
        ]);

        PlanRequirement::Create([
            'title'       => 'Данные',
            'description' => 'мультиспектральные оптические материалы с космических аппаратов',
            'plan_id'     => 1
        ]);
        PlanRequirement::Create([
            'title'       => 'Облачность',
            'description' => 'не более 20% ',
            'plan_id'     => 1
        ]);

        PlanData::Create([
            'title'   => 'Архивный снимок',
            'type_id' => 1,
            'plan_id' => 1
        ]);
        PlanData::Create([
            'title'   => 'Актуальный снимок',
            'type_id' => 1,
            'plan_id' => 1
        ]);



        Plan::Create([
            'title'       => 'Классификация изменений',
            'description' => '
                <p>В ходе выполнения данной задачи происходит поиск изменений по двум разновременным снимкам: архивному и актуальному, и последующая классификация этих изменений по типам подстилающей поверхности на актуальном снимке. </p>

                <p>Для корректной работы алгоритма снимки должны соответствовать следующим требованиям: </p>

                <ul>
                    <li>Снимки имеют область пересечения.</li>
                    <li>Снимки имеют одинаковую последовательность цветовых каналов, так как логика алгоритма заключается в сравнении каждой пары соответствующих каналов. </li>
                </ul>

                <p>
                Результатом выполнения данной задачи является векторный слой изменений, векторные слои для каждого типа подстилающей поверхности на актуальном снимке и отчетная форма со статистической информацией. 
                </p>
                ',
            'excerpt'    => 'Классификация всех изменений на снимках по типу подстилающей поверхности и подсчет площадей изменений для каждого класса. ',
            'preview_id' => 2
        ]);

        PlanRequirement::Create([
            'title'       => 'Данные',
            'description' => 'мультиспектральные оптические материалы с космических аппаратов',
            'plan_id'     => 2
        ]);
        PlanRequirement::Create([
            'title'       => 'Сезон съемки',
            'description' => 'с мая по сентябрь включительно',
            'plan_id'     => 2
        ]);
        PlanRequirement::Create([
            'title'       => 'Облачность',
            'description' => 'не более 20% ',
            'plan_id'     => 2
        ]);

        PlanData::Create([
            'title'   => 'Архивный снимок',
            'type_id' => 1,
            'plan_id' => 2
        ]);
        PlanData::Create([
            'title'   => 'Актуальный снимок',
            'type_id' => 1,
            'plan_id' => 2
        ]);



        Plan::Create([
            'title'       => 'Разновременной мониторинг водных объектов',
            'description' => '
                <p>В ходе выполнения данной задачи происходит поиск изменений, произошедших с водными объектами: реками, морями, озерами и т.д. </p>

                <p>В качестве исходных данных для данной задачи используются разновременные снимки, имеющие область пересечения, и последовательность цветовых каналов которых соответствует RGB.</p>

                <p>Суть данного алгоритма заключается в том, что на двух снимках сначала определяются области водных объектов, а затем происходит их сравнение.</p>

                <p>
                Результатом выполнения данной задачи является векторный слой изменений водных объектов, самих водных объектов и отчетная форма со статистической информацией.
                </p>
                ',
            'excerpt'    => 'Выявление изменений, произошедших с водными объектами. Подсчет площадей водных объектов на разновременных снимках и их изменений.',
            'preview_id' => 3
        ]);

        PlanRequirement::Create([
            'title'       => 'Данные',
            'description' => 'мультиспектральные оптические материалы с космических аппаратов',
            'plan_id'     => 3
        ]);
        PlanRequirement::Create([
            'title'       => 'Сезон съемки',
            'description' => 'с мая по сентябрь включительно',
            'plan_id'     => 3
        ]);
        PlanRequirement::Create([
            'title'       => 'Облачность',
            'description' => 'не более 20% ',
            'plan_id'     => 3
        ]);

        PlanData::Create([
            'title'   => 'Архивный снимок',
            'type_id' => 1,
            'plan_id' => 3
        ]);
        PlanData::Create([
            'title'   => 'Актуальный снимок',
            'type_id' => 1,
            'plan_id' => 3
        ]);



        // Plan::Create([
        //     'title'       => 'Мониторинг растительности',
        //     'description' => '
        //         <p>В ходе выполнения данной задачи происходит поиск изменений, произошедших с растительностью: полями, лесами, кустарниками и т.д. </p>

        //         <p>В качестве исходных данных для данной задачи используются разновременные снимки, имеющие область пересечения, и последовательность цветовых каналов которых соответствует RGB.</p>

        //         <p>Суть данного алгоритма заключается в том, что на двух снимках сначала определяются области растительности, а затем происходит их сравнение.</p>

        //         <p>
        //         Результатом выполнения данной задачи является векторный слой изменений растительности, самой растительности и отчетная форма со статистической информацией.
        //         </p>
        //         ',
        //     'excerpt'    => 'Выявление изменений, произошедших с растительностью.',
        //     'preview_id' => 4
        // ]);

        // PlanRequirement::Create([
        //     'title'       => 'Данные',
        //     'description' => 'мультиспектральные оптические материалы с космических аппаратов',
        //     'plan_id'     => 4
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Сезон съемки',
        //     'description' => 'с мая по сентябрь включительно',
        //     'plan_id'     => 4
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Облачность',
        //     'description' => 'не более 20% ',
        //     'plan_id'     => 4
        // ]);

        // PlanData::Create([
        //     'title'   => 'Архивный снимок',
        //     'type_id' => 1,
        //     'plan_id' => 4
        // ]);
        // PlanData::Create([
        //     'title'   => 'Актуальный снимок',
        //     'type_id' => 1,
        //     'plan_id' => 4
        // ]);

        // КАТОД //
        // Plan::Create([
        //     'title'       => 'Мониторинг состояния посевов',
        //     'description' => '
        //         <p>Автоматизированный сервис по мониторингу состояния посевов предназначен для обеспечения пользователей актуальной и  точной информацией о состоянии сельскохозяйственных территорий. Мониторинг состояния посевов производится по снимку в пределах границ сельскохозяйственных угодий. </p>

        //         <p>Благодаря отличиям в спектральных характеристиках растительности в коротковолновом и среднем инфракрасных диапазонах можно производить качественную оценку состояния сельскохозяйственных культур на различных стадиях вегетации, в том числе выявление полей, имеющих отклонения от норм развития.</p>

        //         <p>Обработка осуществляется путем построения и анализа индекса OSAVI (оптимизированного почвенного вегетационного индекса), разработанного специально для сельского хозяйства. Данный индекс подходит для мониторинга культуры на протяжении всего жизненного цикла. В этом случае значения индекса OSAVI указывают на фазу роста растения. Оценка и систематизация выполняется по серии разновременных снимков в течение вегетационного сезона. Обработка данных спутниковой съемки с целью оперативного мониторинга обширных территорий является наиболее актуальной и оптимальной с точки зрения затрат ресурсов и времени. 
        //         </p>
                
        //         <p>
        //         Результатом обработки является векторные слои стадий вегетации и отчетная форма со статистической информацией.
        //         </p>
        //         ',
        //     'excerpt'    => 'Мониторинг сельскохозяйственных культур на различных стадиях вегетации (определение состояния растительного покрова сельскохозяйственных угодий и их несанкционированного и (или) нецелевого использования)',
        //     'preview_id' => 1
        // ]);

        // PlanRequirement::Create([
        //     'title'       => 'Данные',
        //     'description' => 'мультиспектральные оптические материалы с КА Landsat, Sentinel, Канопус–В/БКА, Ресурс-П',
        //     'plan_id'     => 1
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Сезон съемки',
        //     'description' => 'с мая по сентябрь включительно',
        //     'plan_id'     => 1
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Облачность',
        //     'description' => 'не более 10%',
        //     'plan_id'     => 1
        // ]);

        // PlanData::Create([
        //     'title'   => 'Снимок',
        //     'type_id' => 1,
        //     'plan_id' => 1
        // ]);
        // PlanData::Create([
        //     'title'   => 'Зона интереса',
        //     'type_id' => 2,
        //     'plan_id' => 1
        // ]);



        // Plan::Create([
        //     'title'       => 'Мониторинг содержания азота в сельскохозяйственных растениях',
        //     'description' => '
        //         <p>Автоматизированный алгоритм по мониторингу содержания азота в сельскохозяйственных растениях предназначен для обеспечения пользователей актуальной и  точной информацией о состоянии сельскохозяйственных территорий. Мониторинг производится по снимку в пределах границ сельскохозяйственных угодий. </p>

        //         <p>Благодаря отличиям в спектральных характеристиках растительности можно производить качественную оценку содержания азота  в сельскохозяйственных культурах на различных стадиях вегетации, в том числе выявление полей, имеющих отклонения от норм развития.</p>
                
        //         <p>Обработка осуществляется путем построения и анализа индекса GNDVI. Этот индекс отражает концентрацию азота в растительном покрове. Вегетационные индексы, чувствительные к хлорофиллу, часто одновременно отражают содержание азота. 
        //         Данный индекс подходит для мониторинга культуры на протяжении всего жизненного цикла. Оценка и систематизация выполняется по серии разновременных снимков в течение вегетационного сезона. Обработка данных спутниковой съемки с целью оперативного мониторинга обширных территорий является наиболее актуальной и оптимальной с точки зрения затрат ресурсов и времени. 
        //         Высокие концентрации обычно наблюдаются в быстрорастущей растительности. При азотном голодании листья приобретают бледно-зеленую окраску, мельчают, уменьшается ветвление побегов. При избытке азота усиливается рост, ткани образуются рыхлые, цветение задерживается.
        //         </p>
                
        //         <p>
        //         Результатом обработки является векторный слой содержания азота в сельскохозяйственной растительности и отчетная форма со статистической информацией.
        //         </p>
        //         ',
        //     'excerpt'    => 'Мониторинг содержания азота в тканях сельскохозяйственных растений по космическим  снимкам среднего и высокого разрешения.',
        //     'preview_id' => 2
        // ]);

        // PlanRequirement::Create([
        //     'title'       => 'Данные',
        //     'description' => 'мультиспектральные оптические материалы с КА Landsat, Sentinel, Канопус–В/БКА, Ресурс-П',
        //     'plan_id'     => 2
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Сезон съемки',
        //     'description' => 'с мая по сентябрь включительно',
        //     'plan_id'     => 2
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Облачность',
        //     'description' => 'не более 10%',
        //     'plan_id'     => 2
        // ]);

        // PlanData::Create([
        //     'title'   => 'Снимок',
        //     'type_id' => 1,
        //     'plan_id' => 2
        // ]);
        // PlanData::Create([
        //     'title'   => 'Зона интереса',
        //     'type_id' => 2,
        //     'plan_id' => 2
        // ]);



        // Plan::Create([
        //     'title'       => 'Мониторинг переувлажненной территории на сельскохозяйственных полях',
        //     'description' => '
        //         <p>Автоматизированный алгоритм по мониторингу переувлажненной территории на сельскохозяйственных полях предназначен для обеспечения пользователей актуальной и  точной информацией о состоянии сельскохозяйственных территорий. Мониторинг производится по снимку в пределах границ сельскохозяйственных угодий.</p>

        //         <p>Благодаря отличиям в спектральных характеристиках растительности можно производить качественную оценку территорий сельскохозяйственных полей на выявление участков, подверженных воздействиям воды.</p>

        //         <p>Оценка и систематизация выполняется по серии разновременных снимков в течение вегетационного сезона. Обработка данных спутниковой съемки с целью оперативного мониторинга обширных территорий является наиболее актуальной и оптимальной с точки зрения затрат ресурсов и времени. 
        //         </p>
                
        //         <p>
        //         Результатом обработки является векторный слой с переувлажненными территориями и отчетная форма со статистической информацией.
        //         </p>
        //         ',
        //     'excerpt'    => 'Мониторинг переувлажненной территории на сельскохозяйственных полях по космическим снимкам среднего и высокого разрешения.',
        //     'preview_id' => 3
        // ]);

        // PlanRequirement::Create([
        //     'title'       => 'Данные',
        //     'description' => 'мультиспектральные оптические материалы с КА Landsat, Sentinel, Канопус–В/БКА, Ресурс-П',
        //     'plan_id'     => 3
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Сезон съемки',
        //     'description' => 'с мая по сентябрь включительно',
        //     'plan_id'     => 3
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Облачность',
        //     'description' => 'не более 10%',
        //     'plan_id'     => 3
        // ]);

        // PlanData::Create([
        //     'title'   => 'Снимок',
        //     'type_id' => 1,
        //     'plan_id' => 3
        // ]);
        // PlanData::Create([
        //     'title'   => 'Зона интереса',
        //     'type_id' => 2,
        //     'plan_id' => 3
        // ]);



        // Plan::Create([
        //     'title'       => 'Мониторинг водных объектов',
        //     'description' => '
        //         <p>Водные объекты хорошо различимы на космических снимках, что дает возможность эффективно осуществлять их дистанционное картографирование и мониторинг.</p>

        //         <p>Под мониторингом водных ресурсов понимается система непрерывного и комплексного отслеживания их состояния, контроля и учета количественных и качественных характеристик во времени, взаимообусловленного воздействия и изменения потребительских свойств, а также система прогноза сохранения и развития в разных режимах использования.</p>

        //         <p>Автоматизированный алгоритм предоставляет пользователям актуальную, точную информацию о водных объектах на федеральном, региональном и локальном уровнях. Мониторинг производится по снимкам высокого и среднего разрешения. Обработка данных спутниковой съемки является наиболее актуальной и оптимальной с точки зрения затрат ресурсов и времени для получения качественной и  актуальной информации.  </p>

        //         <p>Космические снимки позволяют следить за развитием разнообразных процессов в реках, озерах, водохранилищах, выявлять их последствия, обусловленных как природными, так и антропогенными факторами.</p>
                
        //         <p>
        //         Результатом обработки является векторный слой с водными объектами и отчетная форма со статистической информацией.
        //         </p>
        //         ',
        //     'excerpt'    => 'Мониторинг водных ресурсов, определение их контуров, инвентаризация и наблюдение за изменениями количества и площадей водоемов  по космическим  снимкам среднего и высокого разрешения.',
        //     'preview_id' => 4
        // ]);

        // PlanRequirement::Create([
        //     'title'       => 'Данные',
        //     'description' => 'мультиспектральные оптические материалы с КА Landsat, Sentinel, Канопус–В/БКА, Ресурс-П',
        //     'plan_id'     => 4
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Сезон съемки',
        //     'description' => 'с мая по сентябрь включительно ',
        //     'plan_id'     => 4
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Облачность',
        //     'description' => 'не более 20% ',
        //     'plan_id'     => 4
        // ]);

        // PlanData::Create([
        //     'title'   => 'Снимок',
        //     'type_id' => 1,
        //     'plan_id' => 4
        // ]);




        // Plan::Create([
        //     'title'       => 'Мониторинг транспортных объектов на водной поверхности',
        //     'description' => '
        //         <p>Автоматизированный алгоритм предоставляет пользователям информацию о судах в водных акваториях. Мониторинг положения судов в морской акватории является важной задачей обеспечения, как навигационной безопасности, так и выявления судов, не декларирующих свое появление в водах. Для ее решения может использоваться космическая съемка, как в оптическом, так и в радиолокационном диапазонах длин волн. Для данного алгоритма применимы данные съемки только в оптическом диапазоне.</p>

        //         <p>Автоматизированное и визуальное дешифрирование производится по снимкам высокого и среднего разрешения. Обработка позволяет анализировать обширные территории, предоставляя качественную и актуальную информацию, экономя ресурсы и время.</p>
                
        //         <p>
        //         Результатом обработки является векторный слой с транспортными объектами на водной поверхности и отчетная форма со статистической информацией.
        //         </p>
        //         ',
        //     'excerpt'    => 'Мониторинг водных транспортных объектов, определение их контуров и расположение по космическим снимкам среднего и высокого разрешения.',
        //     'preview_id' => 5
        // ]);

        // PlanRequirement::Create([
        //     'title'       => 'Данные',
        //     'description' => 'мультиспектральные оптические материалы с КА Landsat, Sentinel, Канопус–В/БКА, Ресурс-П',
        //     'plan_id'     => 5
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Сезон съемки',
        //     'description' => 'с апреля по октябрь включительно ',
        //     'plan_id'     => 5
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Облачность',
        //     'description' => 'не более 20% ',
        //     'plan_id'     => 5
        // ]);

        // PlanData::Create([
        //     'title'   => 'Снимок',
        //     'type_id' => 1,
        //     'plan_id' => 5
        // ]);



        // Plan::Create([
        //     'title'       => 'Выявление взвесей на водной поверхности',
        //     'description' => '
        //         <p>Космический мониторинг позволяет определить участки техногенных загрязнений в воде. Для этого применяются данные среднего и высокого разрешения. Своевременное обнаружение участков загрязнения помогает избежать серьезных проблем с экологией. </p>
        //         <p>Автоматизированный алгоритм по выявлению  взвесей на водных объектах по  космическим снимках предназначен для предоставления пользователям актуальной, точной, всесторонней информацией о загрязнениях водных объектах. </p>
        //         <p>Обработка данных спутниковой съемки с целью оперативного мониторинга обширных территорий является наиболее актуальной и оптимальной с точки зрения затрат ресурсов и времени для получения качественной и  актуальной информации.  </p>
        //         <p>Алгоритм позволит картографировать речные и озерные бассейны, водосборы и классифицировать состояние водных объектов. </p>
                
        //         ',
        //     'excerpt'     => 'Мониторинг состояния водных объектов и выявление загрязненных участков на них.',
        //     'preview_id' => 6
        // ]);

        // PlanRequirement::Create([
        //     'title'       => 'Данные',
        //     'description' => 'мультиспектральные оптические материалы. Landsat, Sentinel, Канопус –В/БКА, Ресурс-П ',
        //     'plan_id'     => 6
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Сезон съемки',
        //     'description' => 'с апреля по октябрь включительно ',
        //     'plan_id'     => 6
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Облачность',
        //     'description' => 'не более 20% ',
        //     'plan_id'     => 6
        // ]);

        // PlanData::Create([
        //     'title'             => 'Снимок',
        //     'type_id' => 1,
        //     'plan_id'           => 6
        // ]);



        // Plan::Create([
        //     'title'       => 'Выявление переувлаженной территории',
        //     'description' => '
        //         <p>Автоматизированный алгоритм по мониторингу переувлажненной территории предназначен для обеспечения пользователей актуальной и  точной информацией о состоянии сельскохозяйственных территорий. Мониторинг производится по снимкам среднего и высокого разрешения. </p>
        //         <p>Благодаря отличиям в спектральных характеристиках растительности можно производить качественную оценку различных  территорий  на выявление участков подверженных воздействиям воды позволяя  выявлять  территории, имеющие отклонения от норм развития.</p>
        //         <p>Оценка и систематизация выполняется по серии разновременных снимков в течение вегетационного сезона. Обработка данных спутниковой съемки с целью оперативного мониторинга обширных территорий является наиболее актуальной и оптимальной с точки зрения затрат ресурсов и времени. </p>
        //         <p>Результатом обработки является векторный слой изменений и отчетная форма со статистической информацией.</p>
        //         ',
        //     'excerpt'     => 'Мониторинг переувлажненной территории на сельскохозяйственных полях по космическим  снимкам среднего и высокого разрешения.',
        //     'preview_id' => 7
        // ]);

        // PlanRequirement::Create([
        //     'title'       => 'Данные',
        //     'description' => 'мультиспектральные оптические материалы. Landsat, Sentinel, Канопус –В/БКА, Ресурс-П ',
        //     'plan_id'     => 7
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Сезон съемки',
        //     'description' => 'с мая по сентябрь включительно ',
        //     'plan_id'     => 7
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Облачность',
        //     'description' => 'не более 10% ',
        //     'plan_id'     => 7
        // ]);

        // PlanData::Create([
        //     'title'             => 'Снимок',
        //     'type_id' => 1,
        //     'plan_id'           => 7
        // ]);






        // APOK //
        // Plan::Create([
        //     'title'       => 'Оценка координатно-измерительных характеристик',
        //     'description' => '
        //     <p>В ходе выполнения задачи определяется уровень измерительных свойств тестируемых изображений и точность их геодезической привязки на основе набора опорных точек.</p>
        //     <p>Материалы наблюдения должны иметь геодезическую привязку, с целью их последующего совмещения с набором опорных точек.</p>
        //     <p>Для оценки геометрического качества изображения необходимо иметь набор опорных точек с известными геодезическими координатами (x_i, y_i). Примерами точек привязки могут служить перекрестки дорог, характерные особенности рек, углы объектов на поверхности земли и другие объекты, которые хорошо видны на изображении, и координаты которых известны пользователю программного комплекса.</p>

        //     <p>
        //     Выполнение задачи возможно в двух режимах: 
        //     </p>
        //     <ul>
        //         <li>Оценка по опорному снимку. В данном режиме происходит автоматическое определение опорных точек на опорном снимке.</li>
        //         <li>Оценка по набору опорных точек. В данном режиме в качестве опорных точек выступают центральные точки небольших геопривязанных изображений. </li>
        //     </ul>

        //     ',
        //     'excerpt'    => 'Оценка измерительных свойств и точности геодезической привязки материалов наблюдения КА ДЗЗ видимого, ближнего ИК и радиолокационного диапазонов электромагнитного излучения.',
        //     'preview_id' => 1
        // ]);        

        // PlanRequirement::Create([
        //     'title'       => 'Данные',
        //     'description' => 'мультиспектральные оптические  и радиолокационные материалы с КА ДЗЗ',
        //     'plan_id'     => 1
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Сезон съемки',
        //     'description' => 'с марта по ноябрь включительно',
        //     'plan_id'     => 1
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Облачность',
        //     'description' => 'не более 20%',
        //     'plan_id'     => 1
        // ]);

        // PlanData::Create([
        //     'title'   => 'Опорный снимок',
        //     'type_id' => 1,
        //     'plan_id' => 1
        // ]);
        // PlanData::Create([
        //     'title'   => 'Оцениваемый снимок',
        //     'type_id' => 1,
        //     'plan_id' => 1
        // ]);


        // Plan::Create([
        //     'title'       => 'Оценка пространственно-частотных характеристик (оптика)',
        //     'description' => '
        //     <p>В ходе выполнения данной задачи осуществляется измерение пространственно-частотных  характеристик по нескольким направлениям: </p>
        //     <ul>
        //         <li>Направление под углом 45 градусов к горизонтали.</li>
        //         <li>Направление по вертикали.</li> 
        //         <li>Направление под углом -45 градусов к горизонтали.</li>
        //         <li>Направление по горизонтали.</li>
        //     </ul>
        //     <p>Производится расчет следующих характеристик: </p>
        //     <ul>
        //         <li>Линейное разрешение оптического снимка, рассчитываемое по каждому направлению в пикселах и метрах.</li>
        //         <li>Среднеквадратическое отклонение полученных измерений по каждому из направлений.</li>
        //         <li>Доверительный интервал, которому с вероятностью 90% принадлежит значение оцениваемого параметра.</li>
        //         <li>Значение частотно-контрастной характеристики на частоте Найквиста.</li>
        //         <li>Количество использованных для расчетов объектов по каждому направлению.</li>
        //     </ul>
        //     <p>Для оценки геометрического качества изображения необходимо иметь набор опорных точек с известными геодезическими координатами (x_i, y_i). Примерами точек привязки могут служить перекрестки дорог, характерные особенности рек, углы объектов на поверхности земли и другие объекты, которые хорошо видны на изображении, и координаты которых известны пользователю программного комплекса.</p>
        //     <p>
        //     При оценивании пространственно-частотных характеристик используется информация об условиях получения анализируемого изображения, приводимая в паспорте, сопровождающем анализируемое изображение. Поэтому для получения корректных результатов по оценке данных характеристик в качестве входных данных необходимо загружать паспорт снимка.
        //     </p>
        //     <p>
        //     <i>
        //     *Примечание: Расчет пространственно-частотных характеристик производится по первому каналу снимка.
        //     </i>
        //     </p>
        //     ',
        //     'excerpt'    => 'Оценка таких пространственно-частотных характеристик оптических космических снимков, как линейное разрешение на местности в пикселах и метрах, а также частотно-контрастная характеристика на частоте Найквиста.',
        //     'preview_id' => 2
        // ]);        

        // PlanRequirement::Create([
        //     'title'       => 'Данные',
        //     'description' => 'мультиспектральные оптические материалы с космических аппаратов (КА) ',
        //     'plan_id'     => 2
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Сезон съемки',
        //     'description' => 'любой',
        //     'plan_id'     => 2
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Облачность',
        //     'description' => 'не более 20%',
        //     'plan_id'     => 2
        // ]);

        // PlanData::Create([
        //     'title'   => 'Паспорт снимка',
        //     'type_id' => 1,
        //     'plan_id' => 2
        // ]);


        // Plan::Create([
        //     'title'       => 'Оценка пространственно-частотных характеристик (радиолокация)',
        //     'description' => '
        //     <p>Реальные характеристики радиолокационной системы оцениваются по снимкам путем статистической обработки радиолокационной информации.</p>
        //     <p>В ходе выполнения данной задачи осуществляется измерение пространственно-частотных  характеристик по нескольким направлениям: </p>
        //     <ul>
        //         <li>Направление под углом 45 градусов к горизонтали.</li>
        //         <li>Направление по вертикали.</li> 
        //         <li>Направление под углом -45 градусов к горизонтали.</li>
        //         <li>Направление по горизонтали.</li>
        //     </ul>
        //     <p>
        //     Производится расчет следующих характеристик: 
        //     </p>
        //     <ul>
        //     <li>Линейное разрешение снимка, полученного радаром с синтезированной апертурой. Линейное разрешение рассчитывается по каждому направлению в пикселах и метрах.</li> 
        //     <li>Среднеквадратичное отклонение полученных измерений по каждому из направлений.</li>
        //     <li>Доверительный интервал, которому с вероятностью 90% принадлежит значение оцениваемого параметра.</li>
        //     <li>Средний уровень боковых лепестков в децибелах.</li>
        //     <li>Количество оцениваемых объектов типа «Точка».</li>
        //     <li>Количество оцениваемых объектов типа «Край».</li> 
        //     </ul>
        //     <p>При оценивании пространственно-частотных характеристик используется информация об условиях получения анализируемого изображения, приводимая в паспорте, сопровождающем анализируемое изображение. Поэтому для получения корректных результатов по оценке данных характеристик в качестве входных данных необходимо загружать паспорт снимка.</p>
        //     ',
        //     'excerpt'    => 'Оценка таких пространственно-частотных характеристик радиолокационных космических снимков, как линейное разрешение на местности в пикселах и метрах, а также средний уровень боковых лепестков в децибелах. ',
        //     'preview_id' => 3
        // ]);        

        // PlanRequirement::Create([
        //     'title'       => 'Данные',
        //     'description' => 'материалы с радиолокационных космических аппаратов',
        //     'plan_id'     => 3
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Сезон съемки',
        //     'description' => 'любой',
        //     'plan_id'     => 3
        // ]);


        // PlanData::Create([
        //     'title'   => 'Паспорт радиолокационного снимка',
        //     'type_id' => 1,
        //     'plan_id' => 3
        // ]);

        // Plan::Create([
        //     'title'       => 'Оценка спектрорадиометрических характеристик (оптика)',
        //     'description' => '
        //     <p>Абсолютная радиометрическая калибровка аппаратуры ДЗЗ позволяет напрямую проводить измерения яркости по снимкам, а также сравнивать снимки с различных космических аппаратов. </p>
        //     <p>Но перед тем как производить радиометрическую калибровку, необходимо оценить радиометрическое качество космических изображений.</p>
        //     <p>
        //     В ходе выполнения данной задачи производится расчет коэффициента отражения по однородной области снимка. Результат вычислений сравнивается со значением коэффициента отражения, измеренным на Земле.
        //     </p>
        //     <p>
        //     Для выполнения данной задачи пользователю необходимо выбрать на снимке, либо подгрузить самостоятельно, однородную область на снимке, по которой будет рассчитан коэффициент отражения, а также необходимо ввести эталонное значение коэффициента отражения для данной области.
        //     </p>
        //     <p>
        //     При расчете коэффициента отражения по снимку используется информация об условиях получения анализируемого изображения, приводимая в паспорте. Поэтому для получения корректных результатов по оценке спектрорадиометрических характеристик в качестве входных данных необходимо загружать паспорт снимка.</p>
        //     <p><i>*Примечание: Расчет коэффициента отражения производится по первому каналу снимка.</i></p>
        //     ',
        //     'excerpt'    => 'Расчет отклонения коэффициента отражения, рассчитанного по снимку, от эталонного значения коэффициента отражения. ',
        //     'preview_id' => 4
        // ]);        

        // PlanRequirement::Create([
        //     'title'       => 'Данные',
        //     'description' => 'мультиспектральные оптические материалы с космических аппаратов',
        //     'plan_id'     => 4
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Сезон съемки',
        //     'description' => 'любой',
        //     'plan_id'     => 4
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Облачность',
        //     'description' => 'не более 20%',
        //     'plan_id'     => 4
        // ]);

        // PlanData::Create([
        //     'title'   => 'Паспорт снимка с оптического космического аппарата',
        //     'type_id' => 1,
        //     'plan_id' => 4
        // ]);
        // PlanData::Create([
        //     'title'   => 'Зона интереса',
        //     'type_id' => 2,
        //     'plan_id' => 4
        // ]); 
        // PlanData::Create([
        //     'title'   => 'Коэффициент отражения',
        //     'type_id' => 3,
        //     'plan_id' => 4
        // ]);


        // Plan::Create([
        //     'title'       => 'Оценка спектрорадиометрических характеристик (радиолокация)',
        //     'description' => '
        //     <p>В ходе выполнения данной задачи производится расчет следующих спектрорадиометрических характеристик: </p>
        //     <ul>
        //         <li>Динамический диапазон в децибелах.</li>
        //         <li>Радиометрическое разрешение снимка в децибелах.</li>
        //     </ul>
        //     <p>При расчете спектрорадиометрических характеристик используется информация об условиях получения анализируемого изображения, приводимая в паспорте. Поэтому для получения корректных результатов в качестве входных данных необходимо загружать паспорт снимка.</p>
        //     ',
        //     'excerpt'    => 'Расчет таких спектрорадиометрических характеристик как динамический диапазон и радиометрическое разрешение снимка в децибелах. ',
        //     'preview_id' => 5
        // ]);        

        // PlanRequirement::Create([
        //     'title'       => 'Данные',
        //     'description' => 'материалы с радиолокационных космических аппаратов',
        //     'plan_id'     => 5
        // ]);
        // PlanRequirement::Create([
        //     'title'       => 'Сезон съемки',
        //     'description' => 'любой',
        //     'plan_id'     => 5
        // ]);


        // PlanData::Create([
        //     'title'   => 'Паспорт радиолокационного снимка',
        //     'type_id' => 1,
        //     'plan_id' => 5
        // ]);

        SateliteType::Create([
            'name' => 'Канопус-В',
        ]);
        SateliteType::Create([
            'name' => 'Ресурс-П',
        ]);
        SateliteType::Create([
            'name' => 'БКА',
        ]);

        Satelite::Create([
            'name'        => 'Канопус-В1',
            'description' => 'Lorem ipsum',
            'type_id'     => 1
        ]);
        Satelite::Create([
            'name'        => 'Канопус-В2',
            'description' => 'Lorem ipsum',
            'type_id'     => 1
        ]);
        Satelite::Create([
            'name'        => 'Канопус-В3',
            'description' => 'Lorem ipsum',
            'type_id'     => 1
        ]);
        Satelite::Create([
            'name'        => 'Канопус-В4',
            'description' => 'Lorem ipsum',
            'type_id'     => 1
        ]);
        Satelite::Create([
            'name'        => 'Канопус-В5',
            'description' => 'Lorem ipsum',
            'type_id'     => 1
        ]);
        Satelite::Create([
            'name'        => 'Канопус-В6',
            'description' => 'Lorem ipsum',
            'type_id'     => 1
        ]);
        Satelite::Create([
            'name'        => 'Ресурс-П 1',
            'description' => 'Lorem ipsum',
            'type_id'     => 2
        ]);

        Sensor::Create([
            'name'        => 'Сенсор 1',
            'description' => 'Lorem ipsum',
            'satelite_id' => 1
        ]);
        Sensor::Create([
            'name'        => 'Сенсор 2',
            'description' => 'Lorem ipsum',
            'satelite_id' => 2
        ]);
        Sensor::Create([
            'name'        => 'Сенсор 3',
            'description' => 'Lorem ipsum',
            'satelite_id' => 3
        ]);

        Spector::Create([
            'name'      => 'Спектор 1',
            'start_w'   => 100,
            'end_w'     => 200,
            'sensor_id' => 1
        ]);
        Spector::Create([
            'name'      => 'Спектор 1',
            'start_w'   => 100,
            'end_w'     => 200,
            'sensor_id' => 2
        ]);
        Spector::Create([
            'name'      => 'Спектор 1',
            'start_w'   => 100,
            'end_w'     => 200,
            'sensor_id' => 3
        ]);

        ProcessingLevel::Create([
            'name' => '2A'
        ]);
        ProcessingLevel::Create([
            'name' => '2B'
        ]);




        TaskStatus::Create([
            'name' => 'Создана'
        ]);
        TaskStatus::Create([
            'name' => 'Запущена'
        ]);
        TaskStatus::Create([
            'name' => 'Завершена'
        ]);
        TaskStatus::Create([
            'name' => 'Завершена и отправлено уведомление'
        ]);
        TaskStatus::Create([
            'id'   => 10,
            'name' => '10'
        ]);
        TaskStatus::Create([
            'id'   => 20,
            'name' => '20'
        ]);
        TaskStatus::Create([
            'id'   => 30,
            'name' => '30'
        ]);
        TaskStatus::Create([
            'id'   => 40,
            'name' => '40'
        ]);
        TaskStatus::Create([
            'id'   => 50,
            'name' => '50'
        ]);
        TaskStatus::Create([
            'id'   => 60,
            'name' => '60'
        ]);
        TaskStatus::Create([
            'id'   => 70,
            'name' => '70'
        ]);
        TaskStatus::Create([
            'id'   => 80,
            'name' => '80'
        ]);
        TaskStatus::Create([
            'id'   => 90,
            'name' => '90'
        ]);

        Task::Create([
            'title'     => 'Выявление изменений',
            'plan_id'   => 1,
            'status_id' => 3,
            'user_id'   => 1
        ]);
        Task::Create([
            'title'     => 'Классификация изменений',
            'plan_id'   => 2,
            'status_id' => 30,
            'user_id'   => 1
        ]);

        // Task::Create([
        //     'title'     => 'Оценка координатно-измерительных характеристик',
        //     'plan_id'   => 1,
        //     'status_id' => 3,
        //     'user_id'   => 1
        // ]);
        // Task::Create([
        //     'title'     => 'Оценка пространственно-частотных характеристик (оптика)',
        //     'plan_id'   => 2,
        //     'status_id' => 1,
        //     'user_id'   => 1
        // ]);


        // Task::Create([
        //     'title'     => 'Мониторинг состояния посевов',
        //     'plan_id'   => 1,
        //     'status_id' => 3,
        //     'user_id'   => 1
        // ]);
        // Task::Create([
        //     'title'     => 'Мониторинг содержания азота в сельскохозяйственных растениях',
        //     'plan_id'   => 1,
        //     'status_id' => 10,
        //     'user_id'   => 1
        // ]);
        // Task::Create([
        //     'title'     => 'Мониторинг водных объектов',
        //     'plan_id'   => 2,
        //     'status_id' => 1,
        //     'user_id'   => 1
        // ]);
        // Task::Create([
        //     'title'     => 'Мониторинг состояния посевов',
        //     'plan_id'   => 1,
        //     'status_id' => 1,
        //     'user_id'   => 1
        // ]);
        // Task::Create([
        //     'title'     => 'Мониторинг водных объектов',
        //     'plan_id'   => 2,
        //     'status_id' => 3,
        //     'user_id'   => 1
        // ]);
        // Task::Create([
        //     'title'     => 'Мониторинг водных объектов',
        //     'plan_id'   => 2,
        //     'status_id' => 3,
        //     'user_id'   => 1
        // ]);
        // Task::Create([
        //     'title'     => 'Мониторинг водных объектов',
        //     'plan_id'   => 2,
        //     'status_id' => 3,
        //     'user_id'   => 1
        // ]);
        // Task::Create([
        //     'title'     => 'Мониторинг водных объектов',
        //     'plan_id'   => 2,
        //     'status_id' => 3,
        //     'user_id'   => 1
        // ]);
        // Task::Create([
        //     'title'     => 'Мониторинг водных объектов',
        //     'plan_id'   => 2,
        //     'status_id' => 10,
        //     'user_id'   => 1
        // ]);
        // Task::Create([
        //     'title'     => 'Мониторинг водных объектов',
        //     'plan_id'   => 2,
        //     'status_id' => 20,
        //     'user_id'   => 2
        // ]);
        // Task::Create([
        //     'title'     => 'Мониторинг водных объектов',
        //     'plan_id'   => 2,
        //     'status_id' => 40,
        //     'user_id'   => 2
        // ]);
        // Task::Create([
        //     'title'     => 'Мониторинг водных объектов',
        //     'plan_id'   => 2,
        //     'status_id' => 10,
        //     'user_id'   => 2
        // ]);
        // Task::Create([
        //     'title'     => 'Мониторинг водных объектов',
        //     'plan_id'   => 2,
        //     'status_id' => 60,
        //     'user_id'   => 2
        // ]);
        // Task::Create([
        //     'title'     => 'Мониторинг водных объектов',
        //     'plan_id'   => 2,
        //     'status_id' => 70,
        //     'user_id'   => 2
        // ]);

        TaskResult::Create([
            'task_id' => 1,
        ]);
        TaskResultViewType::Create([
            'title' => 'Изображение'
        ]);
        TaskResultViewType::Create([
            'title' => 'Геопривязанное изображение'
        ]);



        // File::Create([
        //     'name'           => 'Отчет',
        //     'type_id'        => 2,
        //     'path'           => 'files/result/RGB/Отчет геом.jpg',
        //     'user_id'        => 1,
        //     'task_result_id' => 1
        // ]);
        // File::Create([
        //     'name'           => 'Подложка',
        //     'type_id'        => 1,
        //     'path'           => 'files/result/Превью подложка.png',
        //     'user_id'        => 1,
        //     'task_result_id' => 1
        // ]);
        // File::Create([
        //     'name'           => 'Векторы',
        //     'type_id'        => 1,
        //     'path'           => 'files/result/Превью векторов.png',
        //     'user_id'        => 1,
        //     'task_result_id' => 1
        // ]);
        // File::Create([
        //     'name'           => 'Архив',
        //     'type_id'        => 3,
        //     'path'           => 'files/result',
        //     'user_id'        => 1,
        //     'task_result_id' => 1
        // ]);


        File::Create([
            'name'    => 'Отчет',
            'type_id' => 2,
            'path'    => 'public/АВИМ/result/Отчет.png',
            'user_id' => 1,
        ]);
        File::Create([
            'name'    => 'Архивный снимок',
            'type_id' => 1,
            'path'    => 'public/АВИМ/result/Архивный снимок.png',
            'user_id' => 1,
            // 'task_result_id' => 1
        ]);
        File::Create([
            'name'    => 'Актуальный снимок',
            'type_id' => 1,
            'path'    => 'public/АВИМ/result/Актуальный снимок.png',
            'user_id' => 1,
            // 'task_result_id' => 1
        ]);
        File::Create([
            'name'    => 'Изменения',
            'type_id' => 1,
            'path'    => 'public/АВИМ/result/Изм3.png',
            'user_id' => 1,
            // 'task_result_id' => 1
        ]);
        File::Create([
            'name'    => 'Архив',
            'type_id' => 3,
            'path'    => 'public/result',
            'user_id' => 1,
        ]);


        TaskResultFile::Create([
            'name'           => 'Отчет',
            'task_result_id' => 1,
            'file_id'        => 6
        ]);
        TaskResultFile::Create([
            'name'           => 'Архивный снимок',
            'task_result_id' => 1,
            'file_id'        => 7
            // 'task_result_id' => 1
        ]);
        TaskResultFile::Create([
            'name'           => 'Актуальный снимок',
            'task_result_id' => 1,
            'file_id'        => 8
            // 'task_result_id' => 1
        ]);
        TaskResultFile::Create([
            'name'           => 'Изменения',
            'task_result_id' => 1,
            'file_id'        => 9
            // 'task_result_id' => 1
        ]);
        TaskResultFile::Create([
            'name'           => 'Архив',
            'task_result_id' => 1,
            'file_id'        => 10
        ]);

        // TaskResultView::Create([
        //     'title'          => 'Отчет',
        //     'type_id'        => 1,
        //     'task_result_id' => 1,
        //     'preview_id'     => 10
        // ]);
        // $json3    = json_decode(Storage::get('files/result/Превью подложка.geojson'));
        // $polygon3 = json_encode(\GeoJson\GeoJson::jsonUnserialize($json3)->getFeatures()[0]->getGeometry()->jsonSerialize());
        // TaskResultView::Create([
        //     'title'          => 'Подложка',
        //     'type_id'        => 2,
        //     'geography'      => DB::raw("ST_GeomFromGeoJSON('$polygon3')"),
        //     'task_result_id' => 1,
        //     'preview_id'     => 11
        // ]);
        // $json3    = json_decode(Storage::get('files/result/Превью векторов.geojson'));
        // $polygon3 = json_encode(\GeoJson\GeoJson::jsonUnserialize($json3)->getFeatures()[0]->getGeometry()->jsonSerialize());
        // TaskResultView::Create([
        //     'title'          => 'Результаты обработки',
        //     'type_id'        => 2,
        //     'geography'      => DB::raw("ST_GeomFromGeoJSON('$polygon3')"),
        //     'task_result_id' => 1,
        //     'preview_id'     => 12
        // ]);


        // TaskResultView::Create([
        //     'title'          => 'Отчет',
        //     'type_id'        => 1,
        //     'task_result_id' => 1,
        //     'preview_id'     => 6
        // ]);
        TaskResultView::Create([
            'title'          => 'Отчет',
            'type_id'        => 1,
            'task_result_id' => 1,
            'preview_id'     => 6
        ]);
        $json    = json_decode(Storage::get('public/АВИМ/result/Архивный снимок 2.geojson'));
        $polygon = json_encode(\GeoJson\GeoJson::jsonUnserialize($json)->getFeatures()[0]->getGeometry()->jsonSerialize());
        TaskResultView::Create([
            'title'          => 'Архивный снимок',
            'type_id'        => 2,
            'geography'      => DB::raw("ST_GeomFromGeoJSON('$polygon')"),
            'task_result_id' => 1,
            'preview_id'     => 7
        ]);
        $json    = json_decode(Storage::get('public/АВИМ/result/Актуальный снимок 2.geojson'));
        $polygon = json_encode(\GeoJson\GeoJson::jsonUnserialize($json)->getFeatures()[0]->getGeometry()->jsonSerialize());
        TaskResultView::Create([
            'title'          => 'Акутальный снимок',
            'type_id'        => 2,
            'geography'      => DB::raw("ST_GeomFromGeoJSON('$polygon')"),
            'task_result_id' => 1,
            'preview_id'     => 8
        ]);
        $json    = json_decode(Storage::get('public/АВИМ/result/Изменения.geojson'));
        $polygon = json_encode(\GeoJson\GeoJson::jsonUnserialize($json)->getFeatures()[0]->getGeometry()->jsonSerialize());
        TaskResultView::Create([
            'title'          => 'Изменения',
            'type_id'        => 2,
            'geography'      => DB::raw("ST_GeomFromGeoJSON('$polygon')"),
            'task_result_id' => 1,
            'preview_id'     => 9
        ]);
        
    


        TaskDataType::Create([
            'title' => 'Текст',
        ]);
        TaskDataType::Create([
            'title' => 'Снимок',
        ]);
        TaskDataType::Create([
            'title' => 'Вектор',
        ]);

        TaskData::Create([
            'title'        => 'Архивный снимок',
            'task_id'      => 2,
            'type_id'      => 2,
            'file_id'      => 7,
            'plan_data_id' => 1
        ]);
        TaskData::Create([
            'title'        => 'Актуальный снимок',
            'task_id'      => 2,
            'type_id'      => 2,
            'file_id'      => 8,
            'plan_data_id' => 2
        ]);

        TaskData::Create([
            'title'        => 'Архивный снимок',
            'task_id'      => 1,
            'type_id'      => 2,
            'file_id'      => 7,
            'plan_data_id' => 1
        ]);
        TaskData::Create([
            'title'        => 'Актуальный снимок',
            'task_id'      => 1,
            'type_id'      => 2,
            'file_id'      => 8,
            'plan_data_id' => 2
        ]);
        $json3    = json_decode(Storage::get('public/result/Превью подложка.geojson'));
        $polygon3 = json_encode(\GeoJson\GeoJson::jsonUnserialize($json3)->getFeatures()[0]->getGeometry()->jsonSerialize());
        TaskData::Create([
            'title'        => 'Зона интереса',
            'task_id'      => 1,
            'type_id'      => 3,
            'geography'    => DB::raw("ST_GeomFromGeoJSON('$polygon3')"),
            'plan_data_id' => 3
        ]);


        File::Create([
            'name'    => 'Превью KV3_07790_06176_01_KANOPUS_20190629_043737_043849.SCN13.MS',
            'type_id' => 2,
            'path'    => 'public/00000000000000000000000000000001.png',
        ]);
        File::Create([
            'name'    => 'Папка KV3_07790_06176_01_KANOPUS_20190629_043737_043849.SCN13.MS',
            'type_id' => 3,
            'path'    => 'files/00000000000000000000000000000001',
        ]);
        $json    = json_decode(Storage::get('files/00000000000000000000000000000001/KV3_07790_06176_01_KANOPUS_20190629_043737_043849.SCN13.MS.L2.GBD.json'));
        $polygon = json_encode(\GeoJson\GeoJson::jsonUnserialize($json)->getFeatures()[0]->getGeometry()->jsonSerialize());
        Dzz::Create([
            'name'                => 'KV3_07790_06176_01_KANOPUS_20190629_043737_043849.SCN13.MS',
            'date'                => "29/06/2019",
            'round'               => 23121,
            'route'               => 1,
            'cloudiness'          => 0,
            'geography'           => DB::raw("ST_GeomFromGeoJSON('$polygon')"),
            'description'         => 'lorem ipsum',
            'processing_level_id' => 1,
            'satelite_id'         => 3,
            'preview_id'          => 11,
            'directory_id'        => 12
        ]);


        File::Create([
            'name'    => 'Превью KV4_07336_05222_01_KANOPUS_20190530_043837_044032.SCN13.MS',
            'type_id' => 2,
            'path'    => 'public/00000000000000000000000000000003.png',
        ]);
        File::Create([
            'name'    => 'Папка KV4_07336_05222_01_KANOPUS_20190530_043837_044032.SCN13.MS',
            'type_id' => 3,
            'path'    => 'files/00000000000000000000000000000003',
        ]);
        $json    = json_decode(Storage::get('files/00000000000000000000000000000003/KV4_07336_05222_01_KANOPUS_20190530_043837_044032.SCN13.MS.L2.GBD.json'));
        $polygon = json_encode(\GeoJson\GeoJson::jsonUnserialize($json)->getFeatures()[0]->getGeometry()->jsonSerialize());
        Dzz::Create([
            'name'                => 'KV4_07336_05222_01_KANOPUS_20190530_043837_044032.SCN13.MS',
            'date'                => "30/05/2019",
            'round'               => 23121,
            'route'               => 1,
            'cloudiness'          => 0,
            'geography'           => DB::raw("ST_GeomFromGeoJSON('$polygon')"),
            'description'         => 'lorem ipsum',
            'processing_level_id' => 1,
            'satelite_id'         => 4,
            'preview_id'          => 13,
            'directory_id'        => 14
        ]);


        File::Create([
            'name'    => 'Превью KV4_07336_05222_01_KANOPUS_20190530_043837_044032.SCN14.MS',
            'type_id' => 2,
            'path'    => 'public/00000000000000000000000000000004.png',
        ]);
        File::Create([
            'name'    => 'Папка KV4_07336_05222_01_KANOPUS_20190530_043837_044032.SCN14.MS',
            'type_id' => 3,
            'path'    => 'files/00000000000000000000000000000004',
        ]);
        $json    = json_decode(Storage::get('files/00000000000000000000000000000004/KV4_07336_05222_01_KANOPUS_20190530_043837_044032.SCN14.MS.L2.GBD.json'));
        $polygon = json_encode(\GeoJson\GeoJson::jsonUnserialize($json)->getFeatures()[0]->getGeometry()->jsonSerialize());
        Dzz::Create([
            'name'                => 'KV4_07336_05222_01_KANOPUS_20190530_043837_044032.SCN14.MS',
            'date'                => "30/05/2019",
            'round'               => 23121,
            'route'               => 1,
            'cloudiness'          => 0,
            'geography'           => DB::raw("ST_GeomFromGeoJSON('$polygon')"),
            'description'         => 'lorem ipsum',
            'processing_level_id' => 1,
            'satelite_id'         => 4,
            'preview_id'          => 15,
            'directory_id'        => 16
        ]);


        File::Create([
            'name'    => 'Превью KV6_04254_03083_00_KANOPUS_20191003_044408_044618.SCN13.MS',
            'type_id' => 2,
            'path'    => 'public/00000000000000000000000000000002.png',
        ]);
        File::Create([
            'name'    => 'Папка KV6_04254_03083_00_KANOPUS_20191003_044408_044618.SCN13.MS',
            'type_id' => 3,
            'path'    => 'files/00000000000000000000000000000002',
        ]);
        $json    = json_decode(Storage::get('files/00000000000000000000000000000002/KV6_04254_03083_00_KANOPUS_20191003_044408_044618.SCN13.MS.L2.GBD.json'));
        $polygon = json_encode(\GeoJson\GeoJson::jsonUnserialize($json)->getFeatures()[0]->getGeometry()->jsonSerialize());
        Dzz::Create([
            'name'                => 'KV6_04254_03083_00_KANOPUS_20191003_044408_044618.SCN13.MS',
            'date'                => "03/10/2019",
            'round'               => 23121,
            'route'               => 1,
            'cloudiness'          => 0,
            'geography'           => DB::raw("ST_GeomFromGeoJSON('$polygon')"),
            'description'         => 'lorem ipsum',
            'processing_level_id' => 1,
            'satelite_id'         => 6,
            'preview_id'          => 17,
            'directory_id'        => 18
        ]);



        Alert::Create(
            [
                'title'       => 'Уведомление 1',
                'description' => 'Lorem ipsum'
            ]
        );
        Alert::Create(
            [
                'title'       => 'Уведомление 2',
                'description' => 'Lorem ipsum'
            ]
        );
        Alert::Create(
            [
                'title'       => 'Уведомление 3',
                'description' => 'Lorem ipsum'
            ]
        );
    }
}
